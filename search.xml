<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[检测到目标URL存在框架注入漏洞（即点击劫持）]]></title>
    <url>%2F2018%2F09%2F01%2F%E6%A3%80%E6%B5%8B%E5%88%B0%E7%9B%AE%E6%A0%87URL%E5%AD%98%E5%9C%A8%E6%A1%86%E6%9E%B6%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%8D%B3%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81%EF%BC%89%2F</url>
    <content type="text"><![CDATA[漏洞描述：攻击者有可能注入含有恶意内容的 frame 或 iframe 标记。如果用户不够谨慎，就有可能浏览该标记，却意识不到自己会离开原始站点而进入恶意的站点。之后，攻击者便可以诱导用户再次登录，然后获取其登录凭证。 修复方式：一：在前端页面：当在页面触发点击跳转事件是校验是否点击的窗口在自己的框架中，从而禁止攻击者注入自己的iframe窃取用户的信息12345678910111213141516171819202122/*注册用户离开当前页面跳往其他页面时触发该事件*/window.onbeforeunload = function()&#123; setTimeout(function()&#123; setTimeout(beforeloadResult, 50)&#125; , 50); function beforeloadResult () &#123; alert("你取消了离开网页！"); console.log("这里可以做一些其他操作，比如恢复！"); &#125;或：/*页面一开始就检验当前页面是否是顶层窗口，如果不是，就将当前页面所在的窗口设置为顶层窗口，从而防止别的网站把你自己的网站放在他的Iframe中*/if(top!=window)&#123;top.location=window.location&#125; 二：Nginx 配置X-Frame-Options到 nginx/conf文件夹下，修改nginx.conf ，添加如下内容： ··· bash//配置proxy_pass的下面add_header X-Frame-Options “SAMEORIGIN”;重启Nginx服务。]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[检测到目标URL存在http host头攻击漏洞]]></title>
    <url>%2F2018%2F09%2F01%2F%E6%A3%80%E6%B5%8B%E5%88%B0%E7%9B%AE%E6%A0%87URL%E5%AD%98%E5%9C%A8http-host%E5%A4%B4%E6%94%BB%E5%87%BB%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[漏洞描述：为了方便的获得网站域名，开发人员一般依赖于HTTP Host header。例如，在php里用_SERVER[“HTTP_HOST”]。但是这个header是不可信赖的，如果应用程序没有对host header值进行处理，就有可能造成恶意代码的传入。 修复方式：一：过滤器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import java.io.IOException;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import cn.com.do1.component.util.AppConstant;/** * 防止攻击者替换请求header的host * @author hupenghui * */public class HostAccessFilter implements Filter &#123; private final static transient Logger logger = LoggerFactory.getLogger(HostAccessFilter.class); public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123; HttpServletRequest request = (HttpServletRequest) req; HttpServletResponse response = (HttpServletResponse) res; // 头攻击检测 String requestHost=request.getHeader("host"); if (requestHost != null &amp;&amp; !ServerWhiteListUtil.isWhite(requestHost)) &#123; response.setStatus(403); return; &#125; chain.doFilter(req, res); &#125; @Override public void destroy() &#123; // TODO Auto-generated method stub &#125; @Override public void init(FilterConfig arg0) throws ServletException &#123; // TODO Auto-generated method stub &#125; public static class ServerWhiteListUtil&#123; private static String HOSTS = AppConstant.wx_host_access; /** * 判断当前host是否在白名单内 * @param host 待查host * @return boolean 是否在白名单内 */ public static boolean isWhite(String host) &#123; // logger.info("HostAccessFilter "+host+" 获取域名地址"); //校验host白名单 if (!HOSTS.contains(host)) &#123; logger.info("HostAccessFilter "+host+" 校验host不成功，原因可能是为添加指定的host白名单"); return false; &#125; return true; &#125; &#125;&#125; 二：配置nginx获取真实请求的host域名nginx反向代理配置时，一般会添加下面的配置： 1234567/** 在匹配请求地址的时候配置：location / &#123;xxx&#125;*/proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header REMOTE-HOST $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 其中第一行关于host的配置，是关于域名传递的配置，余下跟IP相关。 java取得域名：` bashJava代码/* 获取域名*/request.getServerName(); /* 获取域名*/request.getHost(); // 或者 request.getHeaders(“host”); /* 获取端口*/request.getPort();···]]></content>
      <categories>
        <category>WEB安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>WEB安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下安装tomcat服务器和部署WEB应用]]></title>
    <url>%2F2018%2F09%2F01%2FLinux%E4%B8%8B%E5%AE%89%E8%A3%85tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E9%83%A8%E7%BD%B2WEB%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[一、上传Tomcat服务器 二、安装Tomcat服务器2.1、解压tomcat服务器压缩包 2.2、配置环境变量tomcat服务器运行时是需要JDK支持的，所以必须配置好JDK用到的那些环境变量 编辑/etc下的profile文件，加上如下内容： 2.3、修改tomcat服务器的启动端口 修改将Tomcat服务器启动时使用的端口，例如改成9999 修改完server.xml文件之后，保存，退出。 三、Tomcat服务器启动和关闭3.1、启动Tomcat服务器进入tomcat服务器的bin目录，然后执行”./startup.sh”命令启动Tomcat服务器，如下图所示： 查看tomcat服务器的Log信息，看看tomcat服务器是否已经正常启动，进入tomcat服务器下的logs目录，打开catalina.out文件进行查看，如下图所示： 访问Tomcat服务器，如下图所示： 可以正常访问了，说明Tomcat服务器已经正常启动成功了。 如果tomcat启动不了，那么最有可能就是启动时使用的端口被其他应用程序占用了，那么可以通过如下的办法进行排查，例如查看9999端口被哪个应用程序占用了。 3.2、关闭Tomcat服务器进入tomcat服务器的bin目录，然后执行”./shutdown.sh”命令启动Tomcat服务器，如下图所示： 查看tomcat服务器的Log信息，看看tomcat服务器是否已经正常关闭，进入tomcat服务器下的logs目录，打开catalina.out文件进行查看，如下图所示： 四、部署JavaWeb应用到Tomcat服务器部署JavaWeb应用到Tomcat服务器就是将开放好的JavaWeb应用打包成war包，然后发布到tomcat服务器的webapps目录下 4.1、打包JavaWeb应用（也可以使用maven的mvn clean package） 项目打包成功，如下图所示： 4.2、将war包发布到tomcat服务器的webapps目录下将JavaWeb应用打包成war包之后，要将这个war包放到tomcat服务器的webapps目录下]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx静态文件缓存的解决方案]]></title>
    <url>%2F2018%2F09%2F01%2Fnginx%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[nginx的一大功能就是完成静态资源的分离部署，减轻后端服务器的压力，如果给这些静态资源再加一级nginx的缓存，可以进一步提升访问效率。 第一步：添加nginx.conf的http级别的缓存配置（在http{}中添加）12345678910##cache## proxy_connect_timeout 500; #跟后端服务器连接的超时时间_发起握手等候响应超时时间 proxy_read_timeout 600; #连接成功后_等候后端服务器响应的时间_其实已经进入后端的排队之中等候处理 proxy_send_timeout 500; #后端服务器数据回传时间_就是在规定时间内后端服务器必须传完所有数据 proxy_buffer_size 128k; #代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可 proxy_buffers 4 128k; #同上 告诉Nginx保存单个用的几个Buffer最大用多大空间 proxy_busy_buffers_size 256k; #如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2 proxy_temp_file_write_size 128k; #proxy缓存临时文件的大小 proxy_temp_path /usr/local/nginx/temp; #用于指定本地目录来缓冲较大的代理请求 proxy_cache_path /usr/local/nginx/cache levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g; #设置web缓存区名为cache_one,内存缓存空间大小为12000M，自动清除超过15天没有被访问过的缓存数据，硬盘缓存空间大小200g 此处的重点在最后一句，缓存存储路径为：/usr/local/nginx/cache，levels=1:2代表缓存的目录结构为2级目录 如下图，缓存会在/usr/local/nginx/cache目录下生成，包含2级目录，在之下就是缓存文件，测试的时候可以到该目录下查看缓存文件是否生成。 第二步：在访问静态文件的location上添加缓存1234567891011#静态数据保存时效location ~ \.html$ &#123; proxy_pass http://source.qingk.cn; proxy_redirect off; proxy_cache cache_one; #此处的cache_one必须于上一步配置的缓存区域名称相同 proxy_cache_valid 200304 12h; proxy_cache_valid 301302 1d; proxy_cache_valid any 1m; #不同的请求设置不同的缓存时效 proxy_cache_key $uri$is_args$args; #生产缓存文件的key，通过4个string变量结合生成 expires 30d; #其余类型的缓存时效为30天 proxy_set_header X-Forwarded-Proto $scheme;&#125; 此处需要注意3点： 1、只有在proxy_pass的时候，才会生成缓存，下一次请求执行到proxy_pass的时候会判断是否有缓存，如果有则直接读缓存，返回给客户端，不会执行proxy_pass；如果没有，则执行proxy_pass，并按照规则生成缓存文件；可以到nginx的cache文件夹下看是否生成了缓存文件。 2、proxy_set_header Host $host 这一句可能导致缓存失败，所以不能配置这一句。我在测试的时候遇到了这个问题，不明原理。 3、proxy_pass使用upstream出差，换成域名或ip则可行。 第三步：在proxy_pass跳转的location中配置静态文件的路径123location ~ .*\.(html)$ &#123; default_type 'text/html'; root "/usr/local/openresty/nginx/html";&#125; 将nginx本地存放静态文件的路径配到root指令处 如果没有这一句：default_type ‘text/html’，所有的请求都默认是下载文件，而不是访问html页面 到此，静态文件缓存已经配置完成。但是还差很重要的最后一步，缓存生成之后会阻止访问进入后台和nginx本地，如果有更新，则更新内容无法生效，还需要一种手动清除缓存的机制。 第四步：清除缓存缓存文件是根据proxy_cache_key这个指令生成的，所以找到对应的缓存文件，删除即可 12345location ~ /purge(/.*) &#123; #删除指定缓存区域cache_one的特定缓存文件$1$is_args$args proxy_cache_purge cache_one $1$is_args$args; #运行本机和10.0.217.0网段的机器访问，拒绝其它所有 allow 127.0.0.1; allow 10.0.217.0/24; deny all;&#125; 删除缓存用到proxy_cache_purge指令。 至此缓存生成和特定清除机制都已经实现。]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
